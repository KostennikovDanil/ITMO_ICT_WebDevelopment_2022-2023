{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0441\u0442\u0435\u043d\u043d\u0438\u043a\u043e\u0432\u0430 \u0414\u0430\u043d\u0438\u043b\u0430 K33401","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33401","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041a\u043e\u0441\u0442\u0435\u043d\u043d\u0438\u043a\u043e\u0432\u0430 \u0414\u0430\u043d\u0438\u043b\u0430 K33401"},{"location":"lr1/","text":"Lab 1 Task 1 client.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) s.send(b'Hello server') msg = s.recv(1024) print(msg.decode(\"utf-8\")) server.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket() s.bind((HOST, PORT)) s.listen() while True: cliensocket, address = s.accept() print(f\"Connection from {address} has been esteblished\") cliensocket.send(b'Hello cleint') msg = cliensocket.recv(1024) if not msg: break print(msg.decode(\"utf-8\")) cliensocket.close() Task 2 client.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) m = '' while not m.isdigit(): m = input(\"Enter m of trapezoid: \") h = '' while not h.isdigit(): h = input(\"Enter h of trapezoid: \") #s.send(b'Hello server') s.send(m.encode()) s.send(h.encode()) res = s.recv(1024) print(res.decode(\"utf-8\")) server.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen() while True: cliensocket, address = s.accept() print(f\"Connection from {address} has been esteblished\") m = float(cliensocket.recv(1024).decode()) if not m: break #print(m) h = float(cliensocket.recv(1024).decode()) if not h: break #print(h) res = m*h res = str(res) cliensocket.send(res.encode()) cliensocket.close() Task 3 client.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) full_msg = '' while True: msg = s.recv(1024) if len(msg) <=0: break full_msg += msg.decode(\"utf-8\") print(full_msg) server.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen() while True: cliensocket, address = s.accept() print(f\"Connection from {address} has been esteblished\") html_file = open('index.html', 'r').read() cliensocket.sendall(f'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n{html_file}'.encode()) cliensocket.close() Task 4 client.py import socket import threading HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) name = input(\"Enter your name: \") def receive(): while True: res = s.recv(1024) print(res.decode(\"utf-8\")) def write(): while True: mes = input('') s.send(f\"{name}: {mes}\".encode(\"utf-8\")) thread = threading.Thread(target=write) thread2 = threading.Thread(target=receive) thread2.start() , thread.start() server.py import socket import threading HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen() clients = [] def brodcast(message): print(message) for client in clients: client.send(message) def handle(client): while True: try: message = client.recv(1024) brodcast(message) except: index = clients.index(client) clients.remove(client) client.close() break def receive(): while True: client, address = s.accept() print(\"Connected with {}\".format(str(address))) clients.append(client) thread = threading.Thread(target=handle, args=(client,)) thread.start() receive() Task 5 MyHTTPServer.py import json import socket import sys from email.parser import Parser from functools import lru_cache from urllib.parse import parse_qs, urlparse MAX_LINE = 64*1024 MAX_HEADERS = 100 class MyHTTPServer: def __init__(self, host, port, server_name): self._host = host self._port = port self._server_name = server_name self.marks = {} def serve_forever(self): serv_sock = socket.socket( socket.AF_INET, socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self._host, self._port)) serv_sock.listen() while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Client serving failed', e) finally: serv_sock.close() def serve_client(self, conn): try: req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) except ConnectionResetError: conn = None except Exception as e: self.send_error(conn, e) if conn: req.rfile.close() conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, ver, headers, rfile) def parse_request_line(self, rfile): raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise HTTPError(400, 'Bad request', 'Request line is too long') req_line = str(raw, 'iso-8859-1') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', 'Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver def parse_headers(self, rfile): headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise HTTPError(494, 'Request header too large') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('iso-8859-1') return Parser().parsestr(sheaders) def handle_request(self, req): if req.path == '/marks' and req.method == 'POST': return self.handle_post_marks(req) if req.path == '/marks' and req.method == 'GET': return self.handle_get_marks(req) if req.path.startswith('/mark/'): subject_id = req.path[len('/mark/'):] print(subject_id) print('') if subject_id.isdigit(): return self.handle_get_user(req, subject_id) raise HTTPError(404, 'Not found') def send_response(self, conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) def handle_post_marks(self, req): mark = int(req.query['mark'][0]) if mark < 1 or mark > 5: return Response(401, 'Value of mark have to be between 1 and 5') subject_id = len(self.marks) + 1 self.marks[subject_id] = {'id': subject_id, 'name': req.query['name'][0], 'mark': req.query['mark'][0]} return Response(204, 'Created') def handle_get_marks(self, req): accept = req.headers.get('Accept') if 'text/html' in accept: contentType = 'text/html; charset=utf-8' body = '<html><head></head><body>' body += f'<div>Marks ({len(self.marks)})</div>' body += '<ul>' for m in self.marks.values(): body += f'<li>#{m[\"id\"]} {m[\"name\"]}, {m[\"mark\"]}</li>' body += '</ul>' body += '</body></html>' elif 'application/json' in accept: contentType = 'application/json; charset=utf-8' body = json.dumps(self.marks) else: # https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/406 return Response(406, 'Not Acceptable') body = body.encode('utf-8') headers = [('Content-Type', contentType), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile @property def path(self): return self.url.path @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target) def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body if __name__ == '__main__': host = sys.argv[1] port = int(sys.argv[2]) name = sys.argv[3] serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"Lab 1"},{"location":"lr1/#lab-1","text":"","title":"Lab 1"},{"location":"lr1/#task-1","text":"client.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) s.send(b'Hello server') msg = s.recv(1024) print(msg.decode(\"utf-8\")) server.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket() s.bind((HOST, PORT)) s.listen() while True: cliensocket, address = s.accept() print(f\"Connection from {address} has been esteblished\") cliensocket.send(b'Hello cleint') msg = cliensocket.recv(1024) if not msg: break print(msg.decode(\"utf-8\")) cliensocket.close()","title":"Task 1"},{"location":"lr1/#task-2","text":"client.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) m = '' while not m.isdigit(): m = input(\"Enter m of trapezoid: \") h = '' while not h.isdigit(): h = input(\"Enter h of trapezoid: \") #s.send(b'Hello server') s.send(m.encode()) s.send(h.encode()) res = s.recv(1024) print(res.decode(\"utf-8\")) server.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen() while True: cliensocket, address = s.accept() print(f\"Connection from {address} has been esteblished\") m = float(cliensocket.recv(1024).decode()) if not m: break #print(m) h = float(cliensocket.recv(1024).decode()) if not h: break #print(h) res = m*h res = str(res) cliensocket.send(res.encode()) cliensocket.close()","title":"Task 2"},{"location":"lr1/#task-3","text":"client.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) full_msg = '' while True: msg = s.recv(1024) if len(msg) <=0: break full_msg += msg.decode(\"utf-8\") print(full_msg) server.py import socket HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen() while True: cliensocket, address = s.accept() print(f\"Connection from {address} has been esteblished\") html_file = open('index.html', 'r').read() cliensocket.sendall(f'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n{html_file}'.encode()) cliensocket.close()","title":"Task 3"},{"location":"lr1/#task-4","text":"client.py import socket import threading HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((HOST, PORT)) name = input(\"Enter your name: \") def receive(): while True: res = s.recv(1024) print(res.decode(\"utf-8\")) def write(): while True: mes = input('') s.send(f\"{name}: {mes}\".encode(\"utf-8\")) thread = threading.Thread(target=write) thread2 = threading.Thread(target=receive) thread2.start() , thread.start() server.py import socket import threading HOST = '127.0.0.1' PORT = 14900 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen() clients = [] def brodcast(message): print(message) for client in clients: client.send(message) def handle(client): while True: try: message = client.recv(1024) brodcast(message) except: index = clients.index(client) clients.remove(client) client.close() break def receive(): while True: client, address = s.accept() print(\"Connected with {}\".format(str(address))) clients.append(client) thread = threading.Thread(target=handle, args=(client,)) thread.start() receive()","title":"Task 4"},{"location":"lr1/#task-5","text":"MyHTTPServer.py import json import socket import sys from email.parser import Parser from functools import lru_cache from urllib.parse import parse_qs, urlparse MAX_LINE = 64*1024 MAX_HEADERS = 100 class MyHTTPServer: def __init__(self, host, port, server_name): self._host = host self._port = port self._server_name = server_name self.marks = {} def serve_forever(self): serv_sock = socket.socket( socket.AF_INET, socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self._host, self._port)) serv_sock.listen() while True: conn, _ = serv_sock.accept() try: self.serve_client(conn) except Exception as e: print('Client serving failed', e) finally: serv_sock.close() def serve_client(self, conn): try: req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) except ConnectionResetError: conn = None except Exception as e: self.send_error(conn, e) if conn: req.rfile.close() conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, ver, headers, rfile) def parse_request_line(self, rfile): raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise HTTPError(400, 'Bad request', 'Request line is too long') req_line = str(raw, 'iso-8859-1') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', 'Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver def parse_headers(self, rfile): headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise HTTPError(494, 'Request header too large') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('iso-8859-1') return Parser().parsestr(sheaders) def handle_request(self, req): if req.path == '/marks' and req.method == 'POST': return self.handle_post_marks(req) if req.path == '/marks' and req.method == 'GET': return self.handle_get_marks(req) if req.path.startswith('/mark/'): subject_id = req.path[len('/mark/'):] print(subject_id) print('') if subject_id.isdigit(): return self.handle_get_user(req, subject_id) raise HTTPError(404, 'Not found') def send_response(self, conn, resp): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn, err): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response(status, reason, [('Content-Length', len(body))], body) self.send_response(conn, resp) def handle_post_marks(self, req): mark = int(req.query['mark'][0]) if mark < 1 or mark > 5: return Response(401, 'Value of mark have to be between 1 and 5') subject_id = len(self.marks) + 1 self.marks[subject_id] = {'id': subject_id, 'name': req.query['name'][0], 'mark': req.query['mark'][0]} return Response(204, 'Created') def handle_get_marks(self, req): accept = req.headers.get('Accept') if 'text/html' in accept: contentType = 'text/html; charset=utf-8' body = '<html><head></head><body>' body += f'<div>Marks ({len(self.marks)})</div>' body += '<ul>' for m in self.marks.values(): body += f'<li>#{m[\"id\"]} {m[\"name\"]}, {m[\"mark\"]}</li>' body += '</ul>' body += '</body></html>' elif 'application/json' in accept: contentType = 'application/json; charset=utf-8' body = json.dumps(self.marks) else: # https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/406 return Response(406, 'Not Acceptable') body = body.encode('utf-8') headers = [('Content-Type', contentType), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) class Request: def __init__(self, method, target, version, headers, rfile): self.method = method self.target = target self.version = version self.headers = headers self.rfile = rfile @property def path(self): return self.url.path @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target) def body(self): size = self.headers.get('Content-Length') if not size: return None return self.rfile.read(size) class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body if __name__ == '__main__': host = sys.argv[1] port = int(sys.argv[2]) name = sys.argv[3] serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"Task 5"},{"location":"lr2/","text":"Lab 2 \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. models.py from django.contrib.auth.base_user import AbstractBaseUser from django.contrib.auth.models import AbstractUser from django.db import models from django.shortcuts import reverse from django.core.validators import MaxValueValidator, MinValueValidator class \u0421onference(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=200) place = models.CharField(max_length=300) place_description = models.TextField() descriptions = models.TextField() start_date = models.DateField(null=True) end_date = models.DateField(null=True) conditions = models.TextField() def get_absolute_url(self): return reverse('get_conference_by_id', kwargs={'id': self.id}) def get_absolute_apply_url(self): return reverse('conference_apply', kwargs={'id': self.id}) def get_absolute_comment_url(self): return reverse('create_comment', kwargs={'id': self.id}) class User(models.Model): id = models.AutoField(primary_key=True) email = models.CharField(unique=True,max_length=50) password = models.CharField(max_length=50) first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) class Comment(models.Model): comment = models.TextField() date = models.DateField(auto_now=True) rank = models.IntegerField(validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) user_id = models.ForeignKey(User, on_delete=models.CASCADE) conference_id = models.ForeignKey(\u0421onference, on_delete=models.CASCADE) class User_confirence(models.Model): id = models.AutoField(primary_key=True) user_id = models.ForeignKey(User, on_delete=models.CASCADE) conference_id = models.ForeignKey(\u0421onference, on_delete=models.CASCADE) view.py from django.core.exceptions import ValidationError from django.shortcuts import render,redirect from django.http import Http404 from django.urls import reverse_lazy from django.views.generic.edit import CreateView, DeleteView, UpdateView from django.views.generic.list import ListView from .models import * from .forms import RegistrUser, LoginUser, ConferenceApply, CreateComment from django.contrib.auth import login, authenticate from django.contrib import messages # Create your views here. class Reg_user(CreateView): model = User fields = [ 'email', 'first_name', 'last_name', 'password' ] template_name = \"reg_user.html\" success_url = reverse_lazy('get_all_conferences') def conference_apply(request, id): form = ConferenceApply(request.POST) if form.is_valid(): email = form.cleaned_data['email'] password = form.cleaned_data['password'] user = User.objects.filter(email=email,password=password).first() if not user: message = \"Wrong email or password, or user is not registered\" return render(request, 'conference_apply.html', context={\"form\": form, \"message\": message}) conference = \u0421onference.objects.get(id=id) user_conf = User_confirence.objects.filter(user_id=user,conference_id=conference).exists() if user_conf: message = \"You have alreade applied\" return render(request, 'conference_apply.html', context={\"form\": form, \"message\": message}) User_confirence.objects.create(user_id=user, conference_id=conference) message = \"Success\" return render(request, 'conference_apply.html', context={\"form\": form, \"message\": message}) return render(request, 'conference_apply.html', context={\"form\": form}) def get_conferences(request): conferences = \u0421onference.objects.all() return render(request, 'conferences.html', context={'conferences': conferences}) def get_conference_by_id(request, id): conference = \u0421onference.objects.get(id=id) users_conf = User_confirence.objects.filter(conference_id=id) coments = Comment.objects.filter(conference_id=id) return render(request, 'conference.html', context={'conference': conference, 'users_conf': users_conf, 'coments': coments}) def applies(request): try: email = request.POST.get('email') password = request.POST.get('password') user = User.objects.get(email=email, password=password) if not user: return False return redirect(f\"/applies/{email}\") except: return render(request, \"applies.html\") def user_applies(request, email): user = User.objects.get(email=email) user_conf = User_confirence.objects.filter(user_id=user) return render(request, 'user_applies.html', context={\"user_conf\": user_conf}) def delete_apply(request, email,id): try: User_confirence.objects.get(id=id).delete() return redirect(f\"/applies/{email}\") except: return redirect(f\"/applies/{email}\") def create_comment(request,id): form = CreateComment(request.POST) if form.is_valid(): email = form.cleaned_data['email'] password = form.cleaned_data['password'] user = User.objects.filter(email=email,password=password).first() if not user: message = \"Wrong email or password, or user is not registered\" return render(request, 'create_comment.html', context={\"form\": form, \"message\": message}) conference = \u0421onference.objects.get(id=id) comment = form.cleaned_data['comment'] rank = form.cleaned_data['rank'] Comment.objects.create(user_id=user,conference_id=conference, comment=comment,rank=rank) return redirect(f\"/conference/{id}\") return render(request, 'create_comment.html', context={\"form\": form}) forms.py from django import forms from django.core.exceptions import ValidationError from django.core.validators import MaxValueValidator, MinValueValidator from Conferences.models import User, \u0421onference, Comment class RegistrUser(forms.ModelForm): email = forms.CharField(max_length=50) password = forms.CharField(max_length=60) first_name = forms.CharField(max_length=50) last_name = forms.CharField(max_length=50) class Meta: model = User fields = [\"email\", \"password\", \"first_name\", \"last_name\"] class ConferenceApply(forms.ModelForm): email = forms.CharField(max_length=50) password = forms.CharField(max_length=60) class Meta: model = \u0421onference fields = [\"email\", \"password\"] class CreateComment(forms.ModelForm): email = forms.CharField(max_length=50) password = forms.CharField(max_length=60) class Meta: model = Comment fields = [\"email\", \"password\", \"comment\", \"rank\"] ursl.py from django.urls import path from .views import * from . import views urlpatterns = [ path('conferences/', get_conferences, name='get_all_conferences'), path('conference/<int:id>/', get_conference_by_id, name='get_conference_by_id'), path(\"registration/\", views.Reg_user.as_view(), name=\"register\"), path(\"conference_apply/<int:id>/\", views.conference_apply, name=\"conference_apply\"), path(\"applies\", views.applies, name='applies'), path(\"applies/<str:email>/\", views.user_applies, name='user_applies'), path(\"delete_apply/<str:email>/<int:id>\", views.delete_apply, name='delete_apply'), path(\"create_comment/<int:id>\", views.create_comment, name='create_comment') ]","title":"Lab 2"},{"location":"lr2/#lab-2","text":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u043c\u0430\u0442\u0438\u043a, \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f, \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. models.py from django.contrib.auth.base_user import AbstractBaseUser from django.contrib.auth.models import AbstractUser from django.db import models from django.shortcuts import reverse from django.core.validators import MaxValueValidator, MinValueValidator class \u0421onference(models.Model): id = models.AutoField(primary_key=True) name = models.CharField(max_length=200) place = models.CharField(max_length=300) place_description = models.TextField() descriptions = models.TextField() start_date = models.DateField(null=True) end_date = models.DateField(null=True) conditions = models.TextField() def get_absolute_url(self): return reverse('get_conference_by_id', kwargs={'id': self.id}) def get_absolute_apply_url(self): return reverse('conference_apply', kwargs={'id': self.id}) def get_absolute_comment_url(self): return reverse('create_comment', kwargs={'id': self.id}) class User(models.Model): id = models.AutoField(primary_key=True) email = models.CharField(unique=True,max_length=50) password = models.CharField(max_length=50) first_name = models.CharField(max_length=50) last_name = models.CharField(max_length=50) class Comment(models.Model): comment = models.TextField() date = models.DateField(auto_now=True) rank = models.IntegerField(validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) user_id = models.ForeignKey(User, on_delete=models.CASCADE) conference_id = models.ForeignKey(\u0421onference, on_delete=models.CASCADE) class User_confirence(models.Model): id = models.AutoField(primary_key=True) user_id = models.ForeignKey(User, on_delete=models.CASCADE) conference_id = models.ForeignKey(\u0421onference, on_delete=models.CASCADE) view.py from django.core.exceptions import ValidationError from django.shortcuts import render,redirect from django.http import Http404 from django.urls import reverse_lazy from django.views.generic.edit import CreateView, DeleteView, UpdateView from django.views.generic.list import ListView from .models import * from .forms import RegistrUser, LoginUser, ConferenceApply, CreateComment from django.contrib.auth import login, authenticate from django.contrib import messages # Create your views here. class Reg_user(CreateView): model = User fields = [ 'email', 'first_name', 'last_name', 'password' ] template_name = \"reg_user.html\" success_url = reverse_lazy('get_all_conferences') def conference_apply(request, id): form = ConferenceApply(request.POST) if form.is_valid(): email = form.cleaned_data['email'] password = form.cleaned_data['password'] user = User.objects.filter(email=email,password=password).first() if not user: message = \"Wrong email or password, or user is not registered\" return render(request, 'conference_apply.html', context={\"form\": form, \"message\": message}) conference = \u0421onference.objects.get(id=id) user_conf = User_confirence.objects.filter(user_id=user,conference_id=conference).exists() if user_conf: message = \"You have alreade applied\" return render(request, 'conference_apply.html', context={\"form\": form, \"message\": message}) User_confirence.objects.create(user_id=user, conference_id=conference) message = \"Success\" return render(request, 'conference_apply.html', context={\"form\": form, \"message\": message}) return render(request, 'conference_apply.html', context={\"form\": form}) def get_conferences(request): conferences = \u0421onference.objects.all() return render(request, 'conferences.html', context={'conferences': conferences}) def get_conference_by_id(request, id): conference = \u0421onference.objects.get(id=id) users_conf = User_confirence.objects.filter(conference_id=id) coments = Comment.objects.filter(conference_id=id) return render(request, 'conference.html', context={'conference': conference, 'users_conf': users_conf, 'coments': coments}) def applies(request): try: email = request.POST.get('email') password = request.POST.get('password') user = User.objects.get(email=email, password=password) if not user: return False return redirect(f\"/applies/{email}\") except: return render(request, \"applies.html\") def user_applies(request, email): user = User.objects.get(email=email) user_conf = User_confirence.objects.filter(user_id=user) return render(request, 'user_applies.html', context={\"user_conf\": user_conf}) def delete_apply(request, email,id): try: User_confirence.objects.get(id=id).delete() return redirect(f\"/applies/{email}\") except: return redirect(f\"/applies/{email}\") def create_comment(request,id): form = CreateComment(request.POST) if form.is_valid(): email = form.cleaned_data['email'] password = form.cleaned_data['password'] user = User.objects.filter(email=email,password=password).first() if not user: message = \"Wrong email or password, or user is not registered\" return render(request, 'create_comment.html', context={\"form\": form, \"message\": message}) conference = \u0421onference.objects.get(id=id) comment = form.cleaned_data['comment'] rank = form.cleaned_data['rank'] Comment.objects.create(user_id=user,conference_id=conference, comment=comment,rank=rank) return redirect(f\"/conference/{id}\") return render(request, 'create_comment.html', context={\"form\": form}) forms.py from django import forms from django.core.exceptions import ValidationError from django.core.validators import MaxValueValidator, MinValueValidator from Conferences.models import User, \u0421onference, Comment class RegistrUser(forms.ModelForm): email = forms.CharField(max_length=50) password = forms.CharField(max_length=60) first_name = forms.CharField(max_length=50) last_name = forms.CharField(max_length=50) class Meta: model = User fields = [\"email\", \"password\", \"first_name\", \"last_name\"] class ConferenceApply(forms.ModelForm): email = forms.CharField(max_length=50) password = forms.CharField(max_length=60) class Meta: model = \u0421onference fields = [\"email\", \"password\"] class CreateComment(forms.ModelForm): email = forms.CharField(max_length=50) password = forms.CharField(max_length=60) class Meta: model = Comment fields = [\"email\", \"password\", \"comment\", \"rank\"] ursl.py from django.urls import path from .views import * from . import views urlpatterns = [ path('conferences/', get_conferences, name='get_all_conferences'), path('conference/<int:id>/', get_conference_by_id, name='get_conference_by_id'), path(\"registration/\", views.Reg_user.as_view(), name=\"register\"), path(\"conference_apply/<int:id>/\", views.conference_apply, name=\"conference_apply\"), path(\"applies\", views.applies, name='applies'), path(\"applies/<str:email>/\", views.user_applies, name='user_applies'), path(\"delete_apply/<str:email>/<int:id>\", views.delete_apply, name='delete_apply'), path(\"create_comment/<int:id>\", views.create_comment, name='create_comment') ]","title":"Lab 2"}]}